@layer components {
  :where(.btn) {
    width: unset;
  }
  .btn {
    @apply inline-flex justify-center items-center shrink-0 cursor-pointer flex-nowrap gap-1.5 text-center align-middle outline-offset-2 select-none no-underline;
    padding-inline: var(--btn-p);
    padding-block: calc(var(--btn-p) / 2);
    color: var(--btn-fg);
    /* height: var(--size); */
    font-size: var(--fontsize, 1rem);
    outline-color: (--btn-color, var(--color-base-content));
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transition-duration: 0.3s;
    border-radius: var(--radius-field);
    background-color: var(--btn-bg);
    /* ??? */
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none;
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    touch-action: manipulation;
    box-shadow: none, var(--btn-shadow);
    text-wrap: nowrap;
    /* --size: calc(var(--size-field, 0.25rem) * 10); */
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: color-mix(
      in oklab,
      var(--btn-bg),
      #000 calc(var(--depth) * 5%)
    );
    /* --btn-shadow:
    0 3px 2px -2px
      color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px
      color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000); */

    .prose & {
      @apply no-underline;
    }

    @media (hover: hover) {
      &:hover {
        --btn-bg: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          var(--color-base-content) 7%
        );
      }

      &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          #000 5%
        );
        --btn-border: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          #000 7%
        );
      }
    }

    &:focus-visible {
      outline-width: 0;
    }

    &:is(:disabled, [disabled], .btn-disabled) {
      &:not(.btn-link, .btn-ghost) {
        @apply bg-base-content/10;
        box-shadow: none;
      }

      @apply pointer-events-none;
      --btn-border: #0000;
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);

      @media (hover: hover) {
        &:hover {
          @apply bg-neutral/20 pointer-events-none;
          --btn-border: #0000;
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
      }
    }

    &:is(input[type='checkbox'], input[type='radio']) {
      @apply appearance-none;

      /* &::after {
      content: attr(aria-label);
    } */
    }
    /* &:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  } */
  }

  html[lang='en'] .btn {
    font-size: var(--fontsize, 0.8rem);
  }

  .btn-active {
    --btn-bg: color-mix(
      in oklab,
      var(--btn-color, var(--color-base-200)),
      #000 7%
    );
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    isolation: isolate;
  }

  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }

  .btn-secondary {
    --btn-color: var(--color-secondary);
    --btn-fg: var(--color-secondary-content);
  }

  .btn-accent {
    --btn-color: var(--color-accent);
    --btn-fg: var(--color-accent-content);
  }

  .btn-neutral {
    --btn-color: var(--color-neutral);
    --btn-fg: var(--color-neutral-content);
    @media (hover: hover) {
      &:hover {
        --btn-bg: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          var(--color-base-100) 7%
        );
      }
    }
  }

  .btn-info {
    --btn-color: var(--color-info);
    --btn-fg: var(--color-info-content);
  }

  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }

  .btn-warning {
    --btn-color: var(--color-warning);
    --btn-fg: var(--color-warning-content);
  }

  .btn-error {
    --btn-color: var(--color-error);
    --btn-fg: var(--color-error-content);
  }

  .btn-outline {
    &:not(.btn-active, :hover, :active:focus, :focus-visible) {
      --btn-color: transparent;
      --btn-shadow: '';
      --btn-bg: #0000;
      --btn-fg: var(--color-base-100);
      --btn-border: var(--color-base-100);
    }

    @media (hover: hover) {
      &:hover {
        --btn-fg: var(--color-base-100);
        --btn-bg: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          transparent 60%
        );
      }
    }
  }

  :root.dark {
    .btn-outline {
      &:not(.btn-active, :hover, :active:focus, :focus-visible) {
        --btn-color: transparent;
        --btn-shadow: '';
        --btn-bg: #0000;
        --btn-fg: var(--color-base-content);
        --btn-border: var(--color-base-content);
      }

      @media (hover: hover) {
        &:hover {
          --btn-fg: var(--color-base-content);
          --btn-bg: color-mix(
            in oklab,
            var(--btn-color, var(--color-base-content)),
            transparent 60%
          );
        }
      }
    }
  }

  :root.dark .btn-outline.darkbg {
    &:not(.btn-active, :hover, :active:focus, :focus-visible) {
      --btn-shadow: '';
      --btn-bg: #0000;
      --btn-fg: var(--color-base-content);
      --btn-border: var(--color-base-content);
    }

    @media (hover: hover) {
      &:hover {
        --btn-fg: var(--color-base-content);
        --btn-border: var(--color-base-content);
      }
    }
  }

  .btn-ghost {
    &:not(.btn-active, :hover, :active:focus, :focus-visible) {
      --btn-shadow: '';
      --btn-bg: #0000;
      --btn-border: #0000;
      /* --btn-noise: none; */
      &:not(:disabled, [disabled], .btn-disabled) {
        @apply outline-current;
        --btn-fg: currentColor;
      }
    }
  }

  .btn-arrow {
    &::after {
      content: '';
      background-color: var(--btn-fg);
      mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="black" stroke-width="2"  stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>');
      mask-size: contain;
      mask-repeat: no-repeat;
      width: 1rem;
      height: 1rem;
      display: inline-block;
      transition: transform 0.2s ease;
    }
    @media (hover: hover) {
      &:hover {
        &::after {
          transform: translateX(0.25rem);
        }
      }
    }
  }

  .btn-link {
    @apply inline-block underline outline-current;
    --btn-border: #0000;
    --btn-bg: #0000;
    --btn-fg: var(--color-primary);
    /* --btn-noise: none; */
    --btn-shadow: '';
    --btn-p: 0;

    &:is(.btn-active, :hover, :active:focus, :focus-visible) {
      @apply underline;
      --btn-border: #0000;
      --btn-bg: #0000;
    }
  }

  .btn-tighter {
    @apply px-2;
  }

  .btn-wide {
    @apply px-12;
  }

  .btn-wider {
    @apply px-16;
  }
}
